# Local AI Stack Setup Guide for Kwintes
# Created and maintained by Z4Y
# Includes: n8n, Ollama, Qdrant, Prometheus, Grafana, Whisper, and Python

## Prerequisites

### Server Requirements
- Ubuntu 22.04 LTS or newer
- Minimum 16GB RAM
- 100GB+ storage
- Domain name with DNS access

### Server Access Information
- IP: [Your Server IP]
- Username: [Your Username]
- Password: [Your Password]

### Required Subdomains
- n8n.kwintes.cloud
- openwebui.kwintes.cloud
- flowise.kwintes.cloud
- supabase.kwintes.cloud
- ollama.kwintes.cloud
- searxng.kwintes.cloud
- grafana.kwintes.cloud
- prometheus.kwintes.cloud
- whisper.kwintes.cloud
- qdrant.kwintes.cloud

## Server Setup Steps

### 1. Update System
```bash
sudo apt update && sudo apt upgrade -y
```

### 2. Install Required Packages
```bash
sudo apt install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    python3 \
    python3-pip \
    git
```

### 3. Install Docker
```bash
# Remove old versions
sudo apt remove -y docker docker-engine docker.io containerd runc
sudo apt autoremove -y

# Install Docker prerequisites
sudo apt install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

# Add Docker's official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Add Docker repository
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker Engine
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Add user to docker group
sudo usermod -aG docker $USER
```

### 4. Install Python Dependencies
```bash
pip3 install docker python-dotenv
```

### 5. Configure Firewall
```bash
sudo ufw allow 22/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw allow 8000/tcp
sudo ufw allow 3000/tcp
sudo ufw allow 3001/tcp
sudo ufw allow 11434/tcp
sudo ufw allow 8080/tcp
sudo ufw allow 9090/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 6333/tcp
sudo ufw enable
```

### 6. Clone Repository
```bash
git clone https://github.com/ThijsdeZeeuw/AVGKWINTES.git
cd AVGKWINTES
```

### 7. Interactive Environment Setup
```bash
python3 start_services.py --interactive
```

This will:
- Generate secure random values for all secrets
- Create necessary data directories
- Set up environment variables
- Create .env and secrets.txt files
- Start all services

## Service Management

### Start Services
```bash
docker-compose up -d
```

### Stop Services
```bash
docker-compose down
```

### View Logs
```bash
docker-compose logs -f
```

### Restart Services
```bash
docker-compose restart
```

## Available AI Models

### Large Language Models (LLMs)
1. gemma3:12b
2. granite3-guardian:8b
3. granite3-guardian:8b-instruct
4. granite3-guardian:8b-q4_K_M
5. granite3-guardian:8b-q5_K_M
6. granite3-guardian:8b-q8_0
7. granite3-guardian:8b-q8_0-instruct
8. granite3-guardian:8b-q8_0-instruct-v2
9. granite3-guardian:8b-q8_0-v2
10. granite3-guardian:8b-q8_0-v2-instruct
11. granite3-guardian:8b-q8_0-v2-instruct-v2
12. granite3-guardian:8b-q8_0-v2-v2
13. granite3-guardian:8b-q8_0-v2-v2-instruct

### Embedding Models
1. granite-embedding:278m
2. granite-embedding:278m-v2

## Security Notes

1. All secrets are automatically generated and stored in secrets.txt
2. Keep secrets.txt secure and never commit it to version control
3. Change all default passwords in production
4. Configure SMTP settings for email notifications
5. Regularly update all components
6. Monitor system logs for security events
7. Backup data regularly
8. Use strong passwords for all services
9. Enable 2FA where available
10. Keep system and dependencies updated

## Maintenance

### Regular Tasks
1. Monitor system resources
2. Check service logs
3. Update Docker images
4. Backup data
5. Review security logs
6. Update SSL certificates
7. Clean up old logs
8. Monitor disk space
9. Check service health
10. Update documentation

### Backup Procedure
1. Stop services
2. Backup data directories
3. Backup .env and secrets.txt
4. Backup Docker volumes
5. Verify backup integrity
6. Document backup date
7. Test restore procedure

## Support

For support or issues:
1. Check service logs
2. Review documentation
3. Contact system administrator
4. Check GitHub issues
5. Review security advisories

# Created and maintained by Z4Y 