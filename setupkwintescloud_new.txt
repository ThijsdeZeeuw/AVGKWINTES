# Kwintes Cloud Setup Instructions

## Prerequisites

1. Ubuntu 24.04 LTS or newer
2. Minimum 16GB RAM
3. 100GB+ storage
4. Domain name (kwintes.cloud) with DNS access
5. Root or sudo access

## Required Subdomains

Make sure the following subdomains are configured in your DNS:
- n8n.kwintes.cloud
- flowise.kwintes.cloud
- openwebui.kwintes.cloud
- supabase.kwintes.cloud
- ollama.kwintes.cloud
- searxng.kwintes.cloud
- grafana.kwintes.cloud
- prometheus.kwintes.cloud
- whisper.kwintes.cloud
- qdrant.kwintes.cloud

## Installation Steps

### 1. System Update and Package Installation
```bash
# Update system and install required packages
sudo apt update && sudo apt upgrade -y && sudo apt install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    python3 \
    python3-pip \
    python3-venv \
    python3-full \
    git \
    build-essential \
    software-properties-common \
    nginx \
    certbot \
    python3-certbot-nginx \
    docker-compose
```

### 2. Install Docker
```bash
# Remove old Docker installations and install new ones
sudo apt remove -y docker docker-engine docker.io containerd runc && \
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
sudo apt update && \
sudo apt install -y docker-ce docker-ce-cli containerd.io && \
sudo usermod -aG docker $USER && \
newgrp docker
```

### 3. Configure Firewall
```bash
# Configure firewall rules
sudo ufw allow OpenSSH && \
sudo ufw allow 80/tcp && \
sudo ufw allow 443/tcp && \
sudo ufw allow 8000/tcp && \
sudo ufw allow 3000/tcp && \
sudo ufw allow 3001/tcp && \
sudo ufw allow 11434/tcp && \
sudo ufw allow 8080/tcp && \
sudo ufw allow 9090/tcp && \
sudo ufw allow 9000/tcp && \
sudo ufw allow 6333/tcp && \
sudo ufw --force enable
```

### 4. Clone Repository and Setup Environment
```bash
# Clone repository and create directories
git clone https://github.com/ThijsdeZeeuw/AVGKWINTES.git && \
cd AVGKWINTES && \
mkdir -p data/{n8n,flowise,webui,supabase,ollama,searxng,prometheus,grafana,whisper,qdrant} && \
chmod -R 755 data && \
python3 -m venv venv && \
source venv/bin/activate && \
pip install docker python-dotenv pydantic requests aiohttp fastapi uvicorn python-multipart python-jose[cryptography] passlib[bcrypt] email-validator pydantic-settings && \
# Pre-pull required Docker images
docker pull flowiseai/flowise:latest && \
docker pull ghcr.io/open-webui/open-webui:main && \
docker pull n8nio/n8n:latest && \
docker pull prom/prometheus:latest && \
docker pull grafana/grafana:latest && \
docker pull onerahmet/openai-whisper-asr-webservice:latest && \
# Set required environment variables for n8n
export N8N_HOSTNAME=n8n.kwintes.cloud && \
export N8N_PROTOCOL=https && \
export N8N_EDITOR_BASE_URL=https://n8n.kwintes.cloud && \
# Start services
python start_services.py --domain kwintes.cloud --subdomain n8n --email tddezeeuw@gmail.com
```

### 5. Verify Installation
```bash
# Check service status and logs
docker-compose ps && \
docker-compose logs -f
```

### 6. Troubleshoot Common Issues

If you encounter the Whisper image error, run:
```bash
# Stop services
docker-compose down

# Pull the correct Whisper image
docker pull onerahmet/openai-whisper-asr-webservice:latest

# Start services again
docker-compose up -d
```

### 7. Whisper Configuration

The Whisper service is configured with the following settings:
- Port: 9000
- Model: base
- Engine: openai_whisper
- Cache: Persisted in data/whisper/cache

You can access the Whisper API documentation at:
- Swagger UI: https://whisper.kwintes.cloud/docs
- ReDoc: https://whisper.kwintes.cloud/redoc

Key features available:
- Multiple ASR engines (OpenAI Whisper, Faster Whisper, WhisperX)
- Multiple output formats (text, JSON, VTT, SRT, TSV)
- Word-level timestamps
- Voice activity detection (VAD) filtering
- Speaker diarization (with WhisperX)
- FFmpeg integration for broad audio/video format support
- GPU acceleration support (if available)

## Available Services

After installation, you can access the following services:

- n8n: https://n8n.kwintes.cloud
- Flowise: https://flowise.kwintes.cloud
- WebUI: https://openwebui.kwintes.cloud
- Supabase: https://supabase.kwintes.cloud
- Ollama: https://ollama.kwintes.cloud
- SearXNG: https://searxng.kwintes.cloud
- Grafana: https://grafana.kwintes.cloud
- Prometheus: https://prometheus.kwintes.cloud
- Whisper: https://whisper.kwintes.cloud
- Qdrant: https://qdrant.kwintes.cloud

## Available AI Models

The following AI models are available through Ollama:

1. gemma3:12b
   - Source: Google
   - Description: 12B parameter model with excellent performance

2. granite-embedding:278m
   - Source: IBM
   - Description: Efficient embedding model for text similarity

3. granite3-guardian:8b
   - Source: IBM
   - Description: 8B parameter model with security focus

4. llama2:13b
   - Source: Meta
   - Description: 13B parameter model with strong performance

5. llama2:7b
   - Source: Meta
   - Description: 7B parameter model with good performance

6. mistral:7b
   - Source: Mistral AI
   - Description: 7B parameter model with excellent performance and instruction-following capabilities

7. mistral-embedding:7b
   - Source: Mistral AI
   - Description: Embedding model for text similarity

## Maintenance

### Update Services
```bash
# Update and restart services
docker-compose pull && docker-compose up -d
```

### View Logs
```bash
# View all logs
docker-compose logs -f

# View specific service logs
docker-compose logs -f [service_name]
```

### Backup
```bash
# Backup data and environment
tar -czf backup_$(date +%Y%m%d).tar.gz data/ && cp .env .env.backup
```

### Troubleshooting

1. Check service status:
```bash
docker-compose ps
```

2. Check service logs:
```bash
docker-compose logs -f [service_name]
```

3. Restart specific service:
```bash
docker-compose restart [service_name]
```

4. Check system resources:
```bash
htop
```

## Security Notes

1. All services are protected by HTTPS
2. Firewall is configured to allow only necessary ports
3. Docker containers are isolated
4. Regular security updates are applied
5. Access control and authentication are enabled for all services

## Support

For issues and support:
1. Check the logs using `docker-compose logs -f`
2. Verify service status using `docker-compose ps`
3. Check system resources using `htop`
4. Review security logs using `journalctl -u docker`
5. Create an issue in the GitHub repository 